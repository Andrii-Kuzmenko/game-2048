{"version":3,"sources":["scripts/main.js"],"names":["cells","document","querySelectorAll","startButton","querySelector","gameScore","messageStart","messageLose","messageWin","gameStarted","initTable","table","addEventListener","innerText","classList","add","oneRowTable","tableToRow","randomEmptyCellIndex","randomTwoOrFour","rowToTable","updateInfo","prevRows","toRenderRows","rotatedTable","event","code","rotateLeft","sumCells","rotateRight","every","cell","i","handleArrowMove","kube","map","oneRow","row","filter","length","reduce","prevCell","push","setTimeout","some","remove","isMovePosible","x","Math","floor","random","rows","indexes","forEach","squere"],"mappings":"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","file":"main.f56cce44.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nlet gameStarted = false;\nconst initTable = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet table = initTable;\n\nstartButton.addEventListener('click', () => {\n  gameStarted = true;\n  gameScore.innerText = 0;\n  table = initTable;\n  startButton.innerText = 'Restart';\n  startButton.classList.add('restart');\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  const oneRowTable = tableToRow(table);\n\n  oneRowTable[randomEmptyCellIndex(oneRowTable)] = randomTwoOrFour();\n  oneRowTable[randomEmptyCellIndex(oneRowTable)] = randomTwoOrFour();\n  table = rowToTable(oneRowTable);\n\n  updateInfo(oneRowTable);\n});\n\ndocument.addEventListener('keyup', () => {\n  if (!gameStarted) {\n    return;\n  }\n\n  const prevRows = tableToRow(table);\n  let toRenderRows = [];\n  let rotatedTable = [];\n\n  switch (event.code) {\n    case 'ArrowUp':\n      rotatedTable = rotateLeft(table);\n      toRenderRows = tableToRow(sumCells(rotatedTable));\n      rotatedTable = rowToTable(toRenderRows);\n      rotatedTable = rotateRight(rotatedTable);\n      toRenderRows = tableToRow(rotatedTable);\n\n      break;\n    case 'ArrowLeft':\n      toRenderRows = tableToRow(sumCells(table));\n\n      break;\n    case 'ArrowDown':\n      rotatedTable = rotateRight(table);\n      toRenderRows = tableToRow(sumCells(rotatedTable));\n      rotatedTable = rowToTable(toRenderRows);\n      rotatedTable = rotateLeft(rotatedTable);\n      toRenderRows = tableToRow(rotatedTable);\n\n      break;\n    case 'ArrowRight':\n      rotatedTable = rotateRight(rotateRight(table));\n      toRenderRows = tableToRow(sumCells(rotatedTable));\n      rotatedTable = rowToTable(toRenderRows);\n      rotatedTable = rotateLeft(rotateLeft(rotatedTable));\n      toRenderRows = tableToRow(rotatedTable);\n\n      break;\n    default:\n      break;\n  }\n\n  if (!prevRows.every((cell, i) => cell === toRenderRows[i])) {\n    handleArrowMove(toRenderRows);\n  };\n});\n\nconst sumCells = (kube) => {\n  return kube.map(oneRow => {\n    let row = oneRow.filter(cell => cell !== 0);\n\n    if (row.length > 1) {\n      row.reduce((prevCell, cell, i) => {\n        if (prevCell === cell) {\n          gameScore.innerText = +gameScore.innerText + row[i - 1] * 2;\n          row[i - 1] *= 2;\n          row[i] = 0;\n\n          return 0;\n        }\n\n        return cell;\n      });\n\n      row = row.filter(cell => cell !== 0);\n    }\n\n    while (row.length < 4) {\n      row.push(0);\n    }\n\n    return row;\n  });\n};\n\nconst handleArrowMove = (row) => {\n  updateInfo(row);\n  row[randomEmptyCellIndex(row)] = randomTwoOrFour();\n  table = rowToTable(row);\n\n  setTimeout(() => {\n    updateInfo(row);\n  }, 150);\n\n  if (row.some(cell => cell === 2048)) {\n    messageWin.classList.remove('hidden');\n    gameStarted = false;\n  } else if (\n    !(randomEmptyCellIndex(tableToRow(table)) + 1)\n      && !isMovePosible()\n  ) {\n    messageLose.classList.remove('hidden');\n  };\n};\n\nconst randomTwoOrFour = () => {\n  const x = Math.floor(Math.random() * 10 + 1);\n\n  return (x === 1) ? 4 : 2;\n};\n\nconst randomEmptyCellIndex = (rows) => {\n  const indexes = [];\n\n  rows.forEach((cell, i) => cell === 0 && indexes.push(i));\n\n  return indexes[Math.floor(Math.random() * indexes.length)];\n};\n\nconst tableToRow = (squere) => {\n  return [...squere[0], ...squere[1], ...squere[2], ...squere[3]];\n};\n\nconst rowToTable = (row) => {\n  return [\n    [row[0], row[1], row[2], row[3]],\n    [row[4], row[5], row[6], row[7]],\n    [row[8], row[9], row[10], row[11]],\n    [row[12], row[13], row[14], row[15]],\n  ];\n};\n\nconst updateInfo = (rows) => {\n  [...cells].map((cell, i) => {\n    cell.classList.remove(`field-cell--${cell.innerText}`);\n    cell.innerText = rows[i];\n    cell.classList.add(`field-cell--${rows[i]}`);\n  });\n};\n\nconst rotateRight = (kube) => {\n  return [\n    [kube[3][0], kube[2][0], kube[1][0], kube[0][0]],\n    [kube[3][1], kube[2][1], kube[1][1], kube[0][1]],\n    [kube[3][2], kube[2][2], kube[1][2], kube[0][2]],\n    [kube[3][3], kube[2][3], kube[1][3], kube[0][3]],\n  ];\n};\n\nconst rotateLeft = (kube) => {\n  return [\n    [kube[0][3], kube[1][3], kube[2][3], kube[3][3]],\n    [kube[0][2], kube[1][2], kube[2][2], kube[3][2]],\n    [kube[0][1], kube[1][1], kube[2][1], kube[3][1]],\n    [kube[0][0], kube[1][0], kube[2][0], kube[3][0]],\n  ];\n};\n\nconst isMovePosible = () => {\n  const row = tableToRow(table);\n\n  return row.some((cell, i) => {\n    if ((i + 1) % 4 !== 0) {\n      return cell === row[i + 1] || cell === row[i + 4];\n    }\n\n    return cell === row[i + 4];\n  });\n};\n"]}